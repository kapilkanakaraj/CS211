Reading x86 Assembly Code

File Naming

The given assembly code is in mystery.given.s.
The unoptimized generated assembly code is in mystery.unoptimized.s.
The optimized generated assembly code is in mystery.s.


Mystery initially took more time to understand since I had to try to interpret the given code.  I attempted to comment on the given code to try to figure out what it did.  However, I had to try out several smaller inputs to ultimately determine that it was Fibonacci Sequence calculator. For the inputted values of 3, received an output value of 2. In general cases, for an input int n, then the calculator output the n'th term of the sequence.  

The optimized code does not create an initial 1000 bytes of uninitialized memory, as I had created a number array in the beginning, with space for 250 ints. The optimized code also cuts down on a lot of excess code in the add function, by using leal so it runs in the format displacement(base register, offset register, scalar multiplier), in which base+offset*scale+displacement. This avoids the constant need to move back 4 or 8 bytes from %edi to %rax to %eax, severely cutting down operations. Another major difference can be seen in the main method, where the array is created instead of data being moved from the %rsi to %rbp to %rax.  

The given code runs the computation faster than it normally would breaking down the number into the seed values of 0 and 1 on the zero and first terms, adding these together to get second term, and repeating the process until the program reaches the n'th term. This was noticeable after a stack trace. The assembly code generated by the gcc compiler is relatively close to the provided assembly file. The program iterates through the loops in the formula n times twice while executing. Thus, this method also runs in linear time, or O(n).


